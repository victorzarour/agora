import { BaseComponent } from '../../base';
import { ICalendarViewProps, ICalendarViewState, ViewType } from './calendar-view.types';
/** @hidden */
export declare class CalendarViewBase extends BaseComponent<ICalendarViewProps, ICalendarViewState> {
    state: ICalendarViewState;
    _marksMap?: {};
    _labelsMap?: {};
    _active: number;
    _activeMonth: number;
    _axis: 'X' | 'Y';
    _body: HTMLElement;
    _cssClass: string;
    _colors: {} | undefined;
    _dayNames: string[];
    _dim: any;
    _firstDay: Date;
    _firstPage: HTMLElement;
    _firstPageDay: Date;
    _hasPicker: boolean;
    _isGrid: boolean;
    _isVertical: boolean;
    _invalid: {} | undefined;
    _pageIndex: number;
    _prevIcon: string;
    _labels: {} | undefined;
    _labelsLayout: {} | undefined;
    _lastDay: Date;
    _lastPageDay: Date;
    _marked: {} | undefined;
    _maxDate: Date | number;
    _maxIndex: number;
    _maxYear: Date | number;
    _maxYearIndex: number;
    _maxYears: number;
    _maxYearsIndex: number;
    _minDate: Date | number;
    _minIndex: number;
    _minYear: Date | number;
    _minYearIndex: number;
    _minYears: number;
    _minYearsIndex: number;
    _months: any[];
    _monthsMulti: number[][];
    _mousewheel: boolean;
    _nextIcon: string;
    _pageNr: number;
    _pickerBtn: HTMLElement;
    _pickerCont: HTMLElement;
    _prevAnim: boolean;
    _rtlNr: number;
    _showOuter: boolean;
    _title: any[];
    _valid: {} | undefined;
    _viewTitle: string;
    _weeks: number;
    _variableRow: number;
    _view: ViewType;
    _yearFirst: boolean;
    _yearIndex: number;
    _yearOffset: number;
    _yearsIndex: number;
    _yearsOffset: number;
    MONTH_VIEW: ViewType;
    YEAR_VIEW: ViewType;
    MULTI_YEAR_VIEW: ViewType;
    private _doc;
    private _hoverTimer;
    private _isHover;
    private _isIndexChange;
    private _isLabelClick;
    private _isSwipeChange;
    private _maxLabels;
    private _observer;
    private _offset;
    private _pageChange;
    private _prevClick;
    private _prevPageChange;
    private _viewEnd;
    private _viewStart;
    private _shouldCheckSize;
    private _shouldFocus;
    private _shouldPageLoad;
    private _disableHover;
    /**
     * Navigates to next page
     */
    nextPage: () => void;
    /**
     * Navigates to previous page
     */
    prevPage: () => void;
    _changeView: (newView?: ViewType) => void;
    _getPageDay(pageIndex: number): number;
    _getPageStyle(index: number, offset: number, pageNr?: number): {};
    _getPageYear(pageIndex: number): number;
    _getPageYears(pageIndex: number): number;
    _getPickerClass(view: ViewType): string;
    _isNextDisabled(isModalPicker?: boolean): boolean;
    _isPrevDisabled(isModalPicker?: boolean): boolean;
    _onDayHoverIn: (ev: any) => void;
    _onDayHoverOut: (ev: any) => void;
    _onLabelClick: (args: any) => void;
    _onDayClick: (args: any) => void;
    _onTodayClick: (args: any) => void;
    _onMonthClick: (args: any) => void;
    _onYearClick: (args: any) => void;
    _onPageChange: (args: any) => void;
    _onYearPageChange: (args: any) => void;
    _onYearsPageChange: (args: any) => void;
    _onAnimationEnd: (args: any) => void;
    _onStart: () => void;
    _onGestureStart: (args: any) => void;
    _onGestureEnd: (args: any) => void;
    _onPickerClose: () => void;
    _onPickerOpen: () => void;
    _onPickerBtnClick: (ev: any) => void;
    _onDocClick: (ev: any) => void;
    _onViewAnimationEnd: () => void;
    _onResize: () => void;
    _onKeyDown: (ev: any) => void;
    protected _render(s: ICalendarViewProps, state: ICalendarViewState): void;
    protected _mounted(): void;
    protected _updated(): void;
    protected _destroy(): void;
    private _getActiveCell;
    private _focusActive;
    private _pageLoaded;
    private _activeChange;
    private _activeYearsChange;
    private _activeYearChange;
    private _prevDocClick;
}
